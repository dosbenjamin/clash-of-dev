---
import type { HTMLTag, Polymorphic } from 'astro/types';

type Props<Tag extends HTMLTag = 'span'> = Polymorphic<{
  as: Tag;
  size?: 'base' | 'lg' | 'xl';
  leading?: 'none' | 'tight' | 'normal';
  weight?: 'medium' | 'semibold' | 'bold';
  transform?: 'uppercase' | 'capitalize' | 'lowercase';
}>;

const { as: Element = 'span', leading, size, weight, transform, ...props }: Props = Astro.props;
---

<Element
  data-size={size}
  data-leading={leading}
  data-weight={weight}
  data-transform={transform}
  class:list="text"
  {...props}
>
  <slot />
</Element>

<style>
  /* Size */
  .text[data-size="base"] {
    font-size: var(--text-base);
    line-height: var(--leading-normal);
  }

  .text[data-size="lg"] {
    font-size: var(--text-lg);
    line-height: var(--leading-tight);
  }

  .text[data-size="xl"] {
    font-size: var(--text-xl);
    line-height: var(--leading-none);
  }

  /* Leading */
  .text[data-leading="none"] {
    line-height: var(--leading-none);
  }

  .text[data-leading="tight"] {
    line-height: var(--leading-tight);
  }

  .text[data-leading="normal"] {
    line-height: var(--leading-normal);
  }

  /* Weight */
  .text[data-weight="medium"] {
    font-weight: var(--font-medium);
  }

  .text[data-weight="semibold"] {
    font-weight: var(--font-semibold);
  }

  .text[data-weight="bold"] {
    font-weight: var(--font-bold);
  }

  /* Transform */
  .text[data-transform="uppercase"] {
    text-transform: uppercase;
  }

  .text[data-transform="capitalize"] {
    text-transform: capitalize;
  }

  .text[data-transform="lowercase"] {
    text-transform: lowercase;
  }
</style>
